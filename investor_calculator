import csv
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Float, String
from sqlalchemy import create_engine, func, desc
from sqlalchemy.orm import sessionmaker

Base = declarative_base()


class CompanyNotFoundError(Exception):
    pass


class Companies(Base):
    __tablename__ = "companies"

    ticker = Column(String(10), primary_key=True)
    name = Column(String(30))
    sector = Column(String(30))


class Financial(Base):
    __tablename__ = "financial"

    ticker = Column(String(10), primary_key=True)
    ebitda = Column(Float)
    sales = Column(Float)
    net_profit = Column(Float)
    market_price = Column(Float)
    net_debt = Column(Float)
    assets = Column(Float)
    equity = Column(Float)
    cash_equivalents = Column(Float)
    liabilities = Column(Float)


def from_csv(path):
    data = []
    with open(path, newline="") as csv_data:
        file_read = csv.reader(csv_data, delimiter=",")
        c = 0
        for line in file_read:
            if c == 0:
                c += 1
                continue
            else:
                clear_line = [None if inf == "" else inf for inf in line]
                data.append(clear_line)
                c += 1
    return data


def add_companies(companies_db, session):
    for company in companies_db:
        session.add(Companies(ticker=company[0],
                              name=company[1],
                              sector=company[2]))
    session.commit()


def add_financial(financial_bd, session):
    for fin_inf in financial_bd:
        session.add(Financial(ticker=fin_inf[0],
                              ebitda=fin_inf[1],
                              sales=fin_inf[2],
                              net_profit=fin_inf[3],
                              market_price=fin_inf[4],
                              net_debt=fin_inf[5],
                              assets=fin_inf[6],
                              equity=fin_inf[7],
                              cash_equivalents=fin_inf[8],
                              liabilities=fin_inf[9]))
    session.commit()


def exit_program():
    print("Have a nice day!")


def greetings():
    print("Welcome to the Investor Program!\n")


def main_menu():
    print("MAIN MENU\n"
          "0 Exit\n"
          "1 CRUD operations\n"
          "2 Show top ten companies by criteria\n")
    choice = int(input("Enter an option:\n"))
    if choice == 0:
        exit_program()
    elif choice == 1:
        crud_menu()
    elif choice == 2:
        top_ten_menu()
    else:
        print("Invalid option!")
        main_menu()


def enter_company_data():

    ticker = input("Enter ticker (in the format 'MOON'):\n")
    name = input("Enter company (in the format 'Moon Corp'):\n")
    sector = input("Enter industries (in the format 'Technology'):\n")

    company = {"ticker": ticker,
               "name": name,
               "sector": sector}

    return company, ticker


def enter_financial_data(ticker):

    ebitda = input("Enter ebitda (in the format '987654321'):\n")
    sales = input("Enter sales (in the format '987654321'):\n")
    net_profit = input("Enter net profit (in the format '987654321'):\n")
    market_price = input("Enter market price (in the format '987654321'):\n")
    net_debt = input("Enter net dept (in the format '987654321'):\n")
    assets = input("Enter assets (in the format '987654321'):\n")
    equity = input("Enter equity (in the format '987654321'):\n")
    cash_equivalents = input("Enter cash equivalents (in the format '987654321'):\n")
    liabilities = input("Enter liabilities (in the format '987654321'):\n")

    financial = {"ticker": ticker,
                 "ebitda": ebitda,
                 "sales": sales,
                 "net_profit": net_profit,
                 "market_price": market_price,
                 "net_debt": net_debt,
                 "assets": assets,
                 "equity": equity,
                 "cash_equivalents": cash_equivalents,
                 "liabilities": liabilities}

    return financial


def none_check(first, second):
    if first is None or second is None:
        return None
    else:
        return round(first / second, 2)


def create_company(sql_session, company_data, financial_data):

    sql_session.add(Companies(**company_data))
    sql_session.add(Financial(**financial_data))
    sql_session.commit()
    print("Company created successfully!")


def read_company(sql_session):

    name = input("Enter company name:\n")
    query = sql_session.query(Companies)
    companies = query.filter(Companies.name.like(f"%{name}%")).all()
    com_lst = []
    for num, company in enumerate(companies):
        print(num, company.name)
        com_lst.append(company.ticker)
    if com_lst:
        company_num = int(input("Enter company number:"))
        com_ticker = com_lst[company_num]
        return com_ticker
    else:
        print("Company not found!")
        return None


def show_properties(com_ticker, sql_session):

    query = sql_session.query(Financial)
    com_query = sql_session.query(Companies)
    company_name = com_query.filter(Companies.ticker == com_ticker)
    properties = query.filter(Financial.ticker == com_ticker)
    for name in company_name:
        print(name.ticker, name.name)
    for proper in properties:
        print("P/E = {}".format(none_check(proper.market_price, proper.net_profit)))
        print("P/S = {}".format(none_check(proper.market_price, proper.sales)))
        print("P/B = {}".format(none_check(proper.market_price, proper.assets)))
        print("ND/EBITDA = {}".format(none_check(proper.net_debt, proper.ebitda)))
        print("ROE = {}".format(none_check(proper.net_profit, proper.equity)))
        print("ROA = {}".format(none_check(proper.net_profit, proper.assets)))
        print("L/A = {}".format(none_check(proper.liabilities, proper.assets)))


def update_company(sql_session, financial_data):

    com_ticker = financial_data.pop("ticker")
    query = sql_session.query(Financial)
    com_filter = query.filter(Financial.ticker == com_ticker)
    com_filter.update(financial_data)
    sql_session.commit()
    print("Company updated successfully!")


def delete_company(sql_session, com_ticker):

    query_com = sql_session.query(Companies)
    query_fin = sql_session.query(Financial)
    query_com.filter(Companies.ticker == com_ticker).delete()
    query_fin.filter(Financial.ticker == com_ticker).delete()
    sql_session.commit()
    print("Company deleted successfully!")


def print_company_list(sql_session):
    query = sql_session.query(Companies).order_by(Companies.ticker)
    all_rows = query.all()
    print("COMPANY LIST")
    for row in all_rows:
        print(row.ticker, row.name, row.sector)


def nd_ebitda(sql_session):
    nd_e = func.round((Financial.net_debt / Financial.ebitda), 2).label("division")
    query = sql_session.query(Financial.ticker, nd_e)
    filtered = query.filter(nd_e).order_by(desc("division")).limit(10).all()
    print("TICKER ND/EBITDA")
    for row in filtered:
        print(row.ticker, row.division)
    print()


def roe(sql_session):
    roe_param = func.round((Financial.net_profit / Financial.equity), 2).label("division")
    query = sql_session.query(Financial.ticker, roe_param)
    filtered = query.filter(roe_param).order_by(desc("division")).limit(10).all()
    print("TICKER ROE")
    for row in filtered:
        print(row.ticker, row.division)
    print()


def roa(sql_session):
    roa_param = func.round((Financial.net_profit / Financial.assets), 2).label("division")
    query = sql_session.query(Financial.ticker, roa_param)
    filtered = query.filter(roa_param).order_by(desc("division")).limit(10).all()
    print("TICKER ROA")
    for row in filtered:
        print(row.ticker, row.division)
    print()


def crud_menu():
    engine = create_engine('sqlite:///investor.db', echo=False)
    Base.metadata.create_all(engine)

    session = sessionmaker(bind=engine)
    session = session()

    print("CRUD MENU\n"
          "0 Back\n"
          "1 Create a company\n"
          "2 Read a company\n"
          "3 Update a company\n"
          "4 Delete a company\n"
          "5 List all companies\n")
    try:
        choice = int(input("Enter an option:\n"))
        if choice == 0:
            main_menu()
        elif choice == 1:
            company_inf, ticker = enter_company_data()
            financial_inf = enter_financial_data(ticker)
            create_company(session, company_inf, financial_inf)
            main_menu()
        elif choice == 2:
            company_ticker = read_company(session)
            if company_ticker is not None:
                show_properties(company_ticker, session)
            main_menu()
        elif choice == 3:
            company_ticker = read_company(session)
            if company_ticker is not None:
                financial_inf = enter_financial_data(company_ticker)
                update_company(session, financial_inf)
            main_menu()
        elif choice == 4:
            company_ticker = read_company(session)
            if company_ticker is not None:
                delete_company(session, company_ticker)
            main_menu()
        elif choice == 5:
            print_company_list(session)
            main_menu()
        else:
            print("Invalid option!")
            main_menu()
    except ValueError:
        print("Invalid option!")


def top_ten_menu():
    engine = create_engine('sqlite:///investor.db', echo=False)
    Base.metadata.create_all(engine)

    session = sessionmaker(bind=engine)
    session = session()

    print("TOP TEN MENU\n"
          "0 Back\n"
          "1 List by ND/EBITDA\n"
          "2 List by ROE\n"
          "3 List by ROA\n")
    try:
        choice = int(input("Enter an option:\n"))
        if choice == 0:
            main_menu()
        elif choice == 1:
            nd_ebitda(session)
            main_menu()
        elif choice == 2:
            roe(session)
            main_menu()
        elif choice == 3:
            roa(session)
            main_menu()
        else:
            print("Invalid option!")
            main_menu()
    except ValueError:
        print("Invalid option!")


def add_data():
    companies_data = from_csv("csvs/companies.csv")
    financial_data = from_csv("csvs/financial.csv")

    engine = create_engine('sqlite:///investor.db', echo=False)
    Base.metadata.create_all(engine)

    session = sessionmaker(bind=engine)
    session = session()

    add_companies(companies_data, session)
    add_financial(financial_data, session)
    print("Database created successfully!")


def main():
    # add_data()
    greetings()
    main_menu()


if __name__ == '__main__':
    main()
